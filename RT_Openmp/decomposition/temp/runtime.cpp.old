/* Copyright (C) 2012 Washington University in St. Louis - All Rights Reserved
 *
 * This file is part of the RT_OpenMP (Real-Time OpenMP) system.
 *
 * The OpenMP name is a registered trademark of the OpenMP Architecture Review
 * Board (ARB). The RT_OpenMP project aims to adapt the OpenMP API for use in 
 * real-time systems, but the RT_OpenMP project is not affiliated with or 
 * endorsed by the OpenMP ARB. 
 *
 * THIS SOFTWARE IS FREE OF CHARGE AND IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
 * MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. THE AUTHORS MAKE NO
 * CLAIM THAT THE SOFTWARE WILL PROVIDE ADEQUATE REAL-TIME OPERATION FOR YOUR
 * PARTICULAR APPLICATION. IN NO EVENT SHALL WASHINGTON UNIVERSITY OR THE 
 * AUTHORS OF THIS SOFTWARE BE LIABLE FOR ANY DAMAGES ARISING FROM THE USE OF 
 * THIS PRODUCT.
 *
 * You have the right to use, modify, and distribute this source code subject
 * to the restrictions in the LICENSE file. Some files included in this 
 * distribution are subject to the GPL v3 license, so programs produced using 
 * RT_OpenMP must be licensed under the GPL v3. See the LICENSE file for more 
 * details.
 */

/* This file is the RT_OMP runtime with accessor functions. */

#include <stdio.h>
#include <math.h>
#include "parallel.c"
#include "time_utils.h"
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <pthread.h>
#include <sched.h>
#include "constants.h"

struct strand {
	void (*func) (void*);
	void* data;
	strand* next_strand;
};

struct segment {
	timespec exec_length;
	unsigned num_subtasks;
	unsigned priority;
	timespec release; //Relative release time from start of period in ms
	strand** strands; //An array of strand pointers, each of which points to a
                    //linked list of strands. There is one array slot for each
                    //processor, so that each CPU can access what strands it
                    //is supposed to execute quickly

	segment* next; //Points to the next segment in program, or NULL if none
};

struct task_data {
	unsigned task_id;
	timespec period; 
	timespec hyperperiod; 
	unsigned period_iters;
	unsigned num_segments;
	segment* first_segment;
	segment* last_segment;
	unsigned* period_misses;
	char* name;
	unsigned* result;
	unsigned* possible;
};

void thread_runtime(void* data) 
{
	task_data* local = (task_data*) data;
	timespec period = local->period;
	unsigned period_iters = local->period_iters;
	unsigned num_segments = local->num_segments;
	char* name = local->name;

	//Priority setting structures
	pthread_t self_id = pthread_self();
	int min_prio = sched_get_priority_min(LINUX_RT_SCHED);
	int max_prio = sched_get_priority_max(LINUX_RT_SCHED);

	//Starting point for the computation
	segment* current_seg = local->first_segment;

	//This is the per-thread TLS data from RT_GOMP
	unsigned absolute_cpu = rt_omp_tls_data.cpu;
	unsigned start_proc = rt_omp_tls_data.team->start_proc;
	unsigned relative_cpu = absolute_cpu - start_proc;

	//Timespecs needed during execution

	timespec start_time;
	timespec period_start;
	timespec period_dl;
	timespec period_end;
	timespec curr_time;

	//Release Guard Values

	timespec seg_release;
	double int_part;
	double frac_part;
	int release_sec;
	long int release_nsec;

	//Bookkeeping values
	unsigned periodic_deadline_miss = 0;
	unsigned seg_iters = 0;

	get_time(start_time);
//	clock_gettime( CLOCK_MONOTONIC, &start_time);
	period_dl = start_time;

	//Period iterations
	for (unsigned pIter = 0; pIter < period_iters; pIter++) {
		
		//The start of the current period is the deadline of the last period. We
		//initialize period_dl for pIter=0 above. 
		period_start = period_dl;		

		//Add one period to the deadline every period iteration
		//Adds period_dl and ts_period together, stores result in period_dl
		ts_add(period_dl, period, period_dl);

		current_seg = local->first_segment;
		seg_iters = 0;

		//Segment iterations
		while (current_seg != NULL) {
			seg_iters++;

			//Release guard: wait until our relative release time before executing
			//absolute release time = relative release + current period start			
			ts_add( current_seg->release, period_start, seg_release); 

			//Sleep until the time seg_release
			sleep_until_future_ts(seg_release);

			//At this point we are free to set priorities and do actual work. We get
			//this data below.
			unsigned seg_prio = current_seg->priority;
			strand*  curr_strand = current_seg->strands[relative_cpu];
			timespec exec_length = current_seg->exec_length;

			//Only go through this loop if there is any work to do
			if (curr_strand != NULL) {

				//Each thread sets it's own priority
				//Note that in linux 99 is the highest priority, while 1 is the lowest
				int ret_val = pthread_setschedprio(self_id, seg_prio);
				if( ret_val != 0 ){
					fprintf(stderr, "WARNING: Could not set thread priority in experiment.cpp, reason: %s\n", strerror(ret_val));
				}

				//Execute work for this segment
				while( curr_strand != NULL ){
					curr_strand->func( curr_strand->data );
					curr_strand = curr_strand->next_strand;
				}

				//We revert our priority to high
				ret_val = pthread_setschedprio(self_id, max_prio);
				if( ret_val != 0 ){
					fprintf(stderr,"WARNING: Could not set thread priority in experiment.cpp, reason: %s\n", strerror(ret_val));
				}

			} //End (if curr_strand != NULL)

			//Move to next segment
			current_seg = current_seg->next;

			//If we're done with all our computation, we want to check deadlines
			//before we go through the end-of-segment barrier
			if (current_seg == NULL) {
				get_time(period_end);

				if (period_end > period_dl) {
					periodic_deadline_miss++;
					__sync_add_and_fetch(&(local->period_misses[pIter]), 1);
				}
			} //End if current_seg == NULL

			//Block on barrier so every thread finishes this segment before going on
			gomp_barrier_wait(&(rt_omp_tls_data.team->barrier));
		} //End segment iterations (while current_seg != null)

		//Now we wait until the next period to progress to next iteration. If we
		//are late then we progress immediately
		get_time(curr_time);
		//We only wait if the current time is less than the total period deadline
		if (curr_time < period_dl) {
			sleep_until_future_ts( period_dl );
		} else { //Otherwise, we have missed our periodic deadline and do not wait
		
		}
	} //End periodic iterations

	//Here we set our final priority to minimum so as to not interfere with
	//still-running threads
	int ret_val = pthread_setschedprio(self_id, min_prio);
	if( ret_val != 0 ){
		fprintf(stderr, "Warning: Could not set thread priority in experiment.cpp, reason: %s\n", strerror(ret_val));
	}

	//Make sure we all finish before anyone prints out results
	gomp_barrier_wait(&(rt_omp_tls_data.team->barrier));

	local->result[relative_cpu] = periodic_deadline_miss;
	local->possible[relative_cpu] = period_iters;

} //End thread_runtime function

int main(int argc, char* argv[]) {
	//First we get all external data and set up all program variables

	char* config_file = argv[1];
	unsigned first_proc = atoi(argv[2]);
	unsigned last_proc = atoi(argv[3]);

	const char* sem_name = argv[4];

	#ifdef RT_GOMP_LOGGING
	const char* sem_log_name = argv[5];
	const char* log_buffer_name = argv[6];

	volatile semaphore* sem_log = getSemaphore(sem_log_name);
	#endif

	#ifdef POLLING_LAUNCHER
	const char* final_sem_name = argv[8];
	volatile semaphore* final_sem = getSemaphore(final_sem_name);
	#endif

	//Read in config file and set up data structures defining the program
	task_data t_data;
	ex_data.name = config_file;
	ex_data.task_id = atoi(argv[7]);

	int task_count = 0;
	#ifdef RT_PREEMPT_LOG
	task_count = atoi(argv[8]);
	ex_data.task_count = task_count;
	#endif

	std::ifstream config;
	config.open(config_file);

	if (!config.is_open()) {
		fprintf(stderr, "ERROR: Could not open file %s\n", config_file);
		abort();
	}

	//Support structures for creating segments and subtasks	
	unsigned num_cpus = last_proc - first_proc + 1;

#ifdef RT_GOMP_LOGGING
	initializeBuffer(log_buffer_name, num_cpus , task_count);
#endif

	unsigned temp;
	segment* current_seg = NULL;

	ex_data.result = (unsigned*) malloc(sizeof(unsigned) * num_cpus);
	ex_data.possible = (unsigned*) malloc(sizeof(unsigned) * num_cpus);
	ex_data.lateness = (timespec*) malloc(sizeof(timespec) * num_cpus);
	config >> ex_data.period;
	config >> ex_data.num_segments;
	ex_data.hyperperiod = static_hyperperiod;
	//The HP is always a multiple of the period
	ex_data.period_iters = (static_hyperperiod / ex_data.period)
			* num_hyperperiods;

	ex_data.period_misses = (unsigned*) malloc(
			sizeof(unsigned) * ex_data.period_iters);
	for (unsigned i = 0; i < ex_data.period_iters; i++) {
		ex_data.period_misses[i] = 0;
	}

	while (config.good()) {

		//The first segment is tracked within the experiment data structure, but
		//subsequent segments are tracked through the struct itself
		if (current_seg == NULL) {
			ex_data.first_segment = new segment;
			current_seg = ex_data.first_segment;
		} else {
			current_seg->next = new segment;
			current_seg = current_seg->next;
		}

		//File info
		config >> current_seg->num_subtasks;
		config >> current_seg->exec_length;
		config >> current_seg->priority;
		config >> current_seg->release;
		//Move past EOL character
		config.ignore(1, NULL);

		//Set up a place for subtask info
		current_seg->tasks_on_cpu = new unsigned[num_cpus];
		for (unsigned i = 0; i < num_cpus; i++)
			current_seg->tasks_on_cpu[i] = 0;

		//In case there are no more segments after this
		current_seg->next = NULL;

		//Get the subtask data for this segment
		if (!config.good()) {
			fprintf(stderr, "ERROR: malformed task file %s, no subtasks\n",
					config_file);
			abort();
		}

		//Try to pull out unsigned int values until we fail
		while (!(config.peek() == '\n')) {
			config >> temp;
			current_seg->tasks_on_cpu[temp]++;
		}

		//Move past second EOL character
		config.ignore(1, NULL);

	} //end WHILE 
	config.close();

	//All data has been gotten and inserted into the experiment_data structure
	void* arg_ptr = (void*) &ex_data;

	RT_GOMP_parallel_start(experiment, arg_ptr, first_proc, last_proc,
			sem_name);

#ifdef RT_GOMP_LOGGING
	// signal the logger that we are complete and logging may terminate
	decrement(sem_log);
#endif

	unsigned total_misses = 0;
	unsigned total_possible = 0;
	timespec total_late = { 0, 0 };

	for (unsigned i = 0; i < num_cpus; i++) {
		total_misses += ex_data.result[i];
		total_possible += ex_data.possible[i];
		total_late.tv_sec += ex_data.lateness[i].tv_sec;
		total_late.tv_nsec += ex_data.lateness[i].tv_nsec;

		if (total_late.tv_nsec > 1000000000) {
			total_late.tv_sec += 1;
			total_late.tv_nsec -= 1000000000;
		}
	}

	float avg_lateness;
	if (total_misses != 0) {
		avg_lateness = (float) timespec_to_ms(total_late)
				/ (float) total_misses;
	} else {
		avg_lateness = 0;
	}

	unsigned tot_period_misses = 0;

	for (unsigned i = 0; i < ex_data.period_iters; i++) {
		if (ex_data.period_misses[i] > 0) {
			tot_period_misses++;
		}
	}

	std::string input = std::string(config_file);
	std::string out_name = "result/";
	unsigned found = input.find(".");
	out_name.append(config_file, 0, found);
	out_name += "_result.txt";
	std::ofstream out_file;
	out_file.open(out_name.c_str());
	out_file << total_misses << " " << total_possible << " "
			<< tot_period_misses << " " << ex_data.period_iters << " "
			<< avg_lateness << std::endl;
	out_file.close();

	//printf("%s %d\n",config_file,total_misses);

	//printf("just before semaphore %s \n",config_file);

	#ifdef POLLING_LAUNCHER
	decrement(final_sem);
	//We don't need to wait on final_sem, as we only decrement it so the launcher
	//knows when to quit
	#endif

	return 0;
}
