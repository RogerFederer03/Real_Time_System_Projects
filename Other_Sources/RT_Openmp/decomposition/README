This package is the RT_OpenMP Runtime System, an execution platform for
scheduling and executing parallel real-time tasks.

Version 0.0

ATTRIBUTION

Unless otherwise stated, all files in RT_OpenMP are copyright (C) 2012 by
Washington University in St. Louis. Files located in the gomp_src/ subdirectory
are from GNU's libgomp library. 

The OpenMP name is a registered trademark of the OpenMP Architecture Review
Board (ARB). The RT_OpenMP project aims to adapt the OpenMP API for use in real-
time systems, but the RT_OpenMP project is not affiliated with or endorsed by
the OpenMP ARB.

The following persons have contributed substantially to the RT_OMP project:

Kunal Agrawal
David Ferry
Chris Gill
Kevin Kieselbach
Jordan Krage
Jing Li
Chenyang Lu
Mahesh Mahadevan

INTRODUCTION
  Real-Time OpenMP (RT-OMP) is a parallel concurrency platform for real-time
  computing on general Linux platforms. A large part of our mission is academic
  research, which we aim to support through robust interfaces that allow custom
  schedulers and task models to be inserted into the system with little to no
  other modification. How exactly we do this is part of our ongoing research.

  This is a pre-release version, which means that some features may be
  incomplete or totally absent. Contact the authors (below) for details.

INSTALLATION
  1) Edit src/Constants.h to specify the size of your machine.
  2) Build the library with the build_script program in the root level.
  3) Examples can be built with the Makefile in the examples directory. Some
       examples might require modification of source code to work properly.

HOW TO USE
  Be sure to link the static library either through normal linking or by
  including librtomp.a in your compilation command. See examples for details.

CONTACT

For questions or concerns about this software, please contact David Ferry by 
email at dferry@go.wustl.edu.

VERSION HISTORY

  Version 0.0 *****************************************************************
    Added support for the parallel-synchronous task model in class Task
    Added support for the parallel-synchronous scheduler in class Runtime
    Tasks may be manually constructed and run through the above two classes
    Added the simple, double, and rate examples to demonstrate this usage
